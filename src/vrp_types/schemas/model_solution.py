# uvx --from datamodel-code-generator datamodel-codegen --input schema_solution.json --input-file-type jsonschema --output model_solution.py --output-model-type pydantic_v2.BaseModel --use-annotated
# generated by datamodel-codegen:
#   filename:  schema_solution.json
#   timestamp: 2025-08-29T06:32:56+00:00

from __future__ import annotations

from typing import Annotated, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, Field, RootModel


class CustomLocationType(RootModel[str]):
    root: Annotated[
        str,
        Field(description='A custom location type which has no reference to matrix.'),
    ]


class Geometry1(BaseModel):
    coordinates: Annotated[
        List,
        Field(
            description="Point's longitude and latitude.", max_length=2, min_length=2
        ),
    ]
    type: Literal['Point']


class Coordinate(RootModel[List]):
    root: Annotated[List, Field(max_length=2, min_length=2)]


class Geometry2(BaseModel):
    coordinates: Annotated[
        List[Coordinate], Field(description='List of longitude and latitude pairs.')
    ]
    type: Literal['LineString']


class Geometry(RootModel[Union[Geometry1, Geometry2]]):
    root: Annotated[
        Union[Geometry1, Geometry2],
        Field(description='Represents geometry of the feature.'),
    ]


class Individual(BaseModel):
    difference: Annotated[
        float, Field(description='Solution cost difference from best individual.')
    ]
    fitness: Annotated[List[float], Field(description='Objectives fitness values.')]


class Interval(BaseModel):
    end: Annotated[str, Field(description='End time specified in RFC3339 format.')]
    start: Annotated[str, Field(description='Start time specified in RFC3339 format.')]


class Location1(BaseModel):
    lat: Annotated[float, Field(description='Latitude.')]
    lng: Annotated[float, Field(description='Longitude.')]


class Location2(BaseModel):
    index: Annotated[int, Field(description='An index in routing matrix.', ge=0)]


class Location3(BaseModel):
    type: Annotated[
        CustomLocationType, Field(description='Specifies a custom location type.')
    ]


class Location(RootModel[Union[Location1, Location2, Location3]]):
    root: Annotated[
        Union[Location1, Location2, Location3],
        Field(description='Represents a location type.'),
    ]


class Population(BaseModel):
    individuals: Annotated[
        List[Individual], Field(description='Population individuals.')
    ]


class Schedule(BaseModel):
    arrival: Annotated[
        str, Field(description='Arrival time specified in RFC3339 format.')
    ]
    departure: Annotated[
        str, Field(description='Departure time specified in RFC3339 format.')
    ]


class Timing(BaseModel):
    break_: Annotated[int, Field(alias='break', description='Break time.')]
    commuting: Annotated[Optional[int], Field(description='Commuting time.')] = 0
    driving: Annotated[int, Field(description='Driving time.')]
    parking: Annotated[Optional[int], Field(description='Parking time.')] = 0
    serving: Annotated[int, Field(description='Serving time.')]
    waiting: Annotated[int, Field(description='Waiting time.')]


class UnassignedJobDetail(BaseModel):
    shiftIndex: Annotated[int, Field(description='Vehicle shift index.', ge=0)]
    vehicleId: Annotated[str, Field(description='Vehicle id.')]


class UnassignedJobReason(BaseModel):
    code: Annotated[str, Field(description='A reason code.')]
    description: Annotated[str, Field(description='Description.')]
    details: Annotated[
        Optional[List[UnassignedJobDetail]],
        Field(description='Optionally, more details.'),
    ] = None


class Violation1(BaseModel):
    shift_index: Annotated[int, Field(description='Index of the shift.', ge=0)]
    type: Literal['break']
    vehicle_id: Annotated[str, Field(description='An id of a vehicle break belong to.')]


class Violation(RootModel[Violation1]):
    root: Annotated[Violation1, Field(description='Specifies a type of violation.')]


class CommuteInfo(BaseModel):
    distance: Annotated[float, Field(description='Travelled distance.')]
    location: Annotated[Location, Field(description='Commute location.')]
    time: Annotated[Interval, Field(description='Travel time.')]


class Feature(BaseModel):
    geometry: Annotated[Geometry, Field(description='Feature geometry.')]
    properties: Annotated[Dict[str, str], Field(description='Feature properties.')]


class FeatureCollection(BaseModel):
    features: Annotated[List[Feature], Field(description='List of features.')]


class Generation(BaseModel):
    i1000Ratio: Annotated[
        float, Field(description='Improvement ratio last 1000 generations.')
    ]
    iAllRatio: Annotated[float, Field(description='Overall improvement ratio.')]
    isImprovement: Annotated[
        bool, Field(description='True if this generation considered as improvement.')
    ]
    number: Annotated[int, Field(description='Generation sequence number.', ge=0)]
    population: Annotated[Population, Field(description='Population state.')]
    timestamp: Annotated[float, Field(description='Time since evolution started.')]


class Metrics(BaseModel):
    duration: Annotated[int, Field(description='Total algorithm duration.', ge=0)]
    evolution: Annotated[List[Generation], Field(description='Evolution progress.')]
    generations: Annotated[int, Field(description='Total amount of generations.', ge=0)]
    speed: Annotated[float, Field(description='Speed: generations per second.')]


class Statistic(BaseModel):
    cost: Annotated[float, Field(description='Total cost.')]
    distance: Annotated[int, Field(description='Total distance.')]
    duration: Annotated[int, Field(description='Total duration.')]
    times: Annotated[Timing, Field(description='Timing statistic.')]


class UnassignedJob(BaseModel):
    jobId: Annotated[str, Field(description='Job id.')]
    reasons: Annotated[
        List[UnassignedJobReason], Field(description='Possible reasons.')
    ]


class Commute(BaseModel):
    backward: Annotated[
        Optional[CommuteInfo], Field(description='Commuting from the activity place.')
    ] = None
    forward: Annotated[
        Optional[CommuteInfo], Field(description='Commuting to the activity place.')
    ] = None


class Extras(BaseModel):
    features: Annotated[
        Optional[FeatureCollection],
        Field(description='Represents solution as a collection of geo json features.'),
    ] = None
    metrics: Annotated[Optional[Metrics], Field(description='A telemetry metrics.')] = (
        None
    )


class Activity(BaseModel):
    commute: Annotated[Optional[Commute], Field(description='Commute information.')] = (
        None
    )
    jobId: Annotated[str, Field(description='Job id.')]
    jobTag: Annotated[Optional[str], Field(description='Job tag.')] = None
    location: Annotated[Optional[Location], Field(description='Location.')] = None
    time: Annotated[Optional[Interval], Field(description='Activity time.')] = None
    type: Annotated[str, Field(description='Activity type.')]


class PointStop(BaseModel):
    activities: Annotated[
        List[Activity], Field(description='Activities performed at the stop.')
    ]
    distance: Annotated[
        int, Field(description='Distance traveled since departure from start.')
    ]
    load: Annotated[
        List[int], Field(description='Vehicle load after departure from this stop.')
    ]
    location: Annotated[
        Location,
        Field(description='Stop location. When omitted vehicle can stop anywhere.'),
    ]
    parking: Annotated[Optional[Interval], Field(description='Parking time.')] = None
    time: Annotated[Schedule, Field(description='Stop schedule.')]


class TransitStop(BaseModel):
    activities: Annotated[
        List[Activity], Field(description='Activities performed at the stop.')
    ]
    load: Annotated[
        List[int], Field(description='Vehicle load after departure from this stop.')
    ]
    time: Annotated[Schedule, Field(description='Stop schedule.')]


class Stop(RootModel[Union[PointStop, TransitStop]]):
    root: Annotated[
        Union[PointStop, TransitStop],
        Field(
            description='A stop is a place where vehicle is supposed to do some work.'
        ),
    ]


class Tour(BaseModel):
    shiftIndex: Annotated[Optional[int], Field(description='Shift index.', ge=0)] = 0
    statistic: Annotated[Statistic, Field(description='Tour statistic.')]
    stops: Annotated[List[Stop], Field(description='List of stops.')]
    typeId: Annotated[str, Field(description='Vehicle type id.')]
    vehicleId: Annotated[str, Field(description='Vehicle id.')]


class Solution(BaseModel):
    extras: Annotated[Optional[Extras], Field(description='An extra information.')] = (
        None
    )
    statistic: Annotated[Statistic, Field(description='Total statistic.')]
    tours: Annotated[List[Tour], Field(description='List of tours.')]
    unassigned: Annotated[
        Optional[List[UnassignedJob]], Field(description='List of unassigned jobs.')
    ] = None
    violations: Annotated[
        Optional[List[Violation]], Field(description='List of constraint violations.')
    ] = None
